sort
   Nat, Bool;

cons
   zero : -> Nat;
   succ : Nat -> Nat;
   true, false : -> Bool;
map
   add : Nat # Nat -> Nat;
   not : Bool -> Bool;
   and : Bool # Bool -> Bool;
var
   x : Bool;
   m,n : Nat;

eqn
  not(true) = false;
  not(false) = true;
  and(true,true) = true;
  and(x,false) = false;
  and(false,x)=false;
  add(zero,m) = m;
  add(succ(n), m) = succ(add(n,m));

msg
   ack ;
   rep : Loc # Loc ;
   req : Loc

act
  succ;

loc l1,l2;

proc
   X(adr:Loc) = snd(req(adr)).X(adr) ;
   Y(adr:Loc) = sum lx:Loc.rcv(req(lx)).snd(rep(adr,lx)).succ.Y(adr)

init
   abs(req,encap(rep,(hide(l1,deploy(l1,X(l1)) || deploy(l2,Y(l2))))));
