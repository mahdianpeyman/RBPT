
sort
   Nat, Bool;

cons
   zero : -> Nat;
   succ : Nat11111 -> Nat;
   true, false : -> Bool;
map
   add : Nat # Nat -> Nat;
   not : Bool -> Bool;
   and : Bool # Bool -> Bool;
var
   x : Bool;
   m,n : Nat;

eqn
  not(true) = false;
  not(false) = true;
  and(true,true) = true;
  and(x,false) = false;
  and(false,x)=false;
  add(zero,m) = m;
  add(succ(n), m) = succ(add(n,m));

msg
   ack ;
   reply : Nat ;

loc l;

proc
   Test(z:Bool,w:Nat) = snd(ack).(z->snd(reply(w)).delta <> delta) +
                        sum t:Nat.rcv(reply(t)).snd(ack).delta ;

init
   deploy(l,Test(true,succ(zero)));
