Nat
Bool
(program (sorts sort Nat , Bool ;) (funcs cons (function zero : (type -> Nat) ;) (function succ : (type (tuple Nat) -> Nat) ;) (function true , false : (type -> Bool) ;)) (maps map (map add : (type (tuple Nat # Nat) -> Nat) ;) (map not : (type (tuple Bool) -> Bool) ;) (map and : (type (tuple Bool # Bool) -> Bool) ;)) (vars var (var x : Bool ;) (var m , n : Nat ;)) (eqns eqn (equation (simpleExpression not ( (simpleExpression true) )) = (simpleExpression false) ;) (equation (simpleExpression not ( (simpleExpression false) )) = (simpleExpression true) ;) (equation (simpleExpression and ( (simpleExpression true) , (simpleExpression true) )) = (simpleExpression true) ;) (equation (simpleExpression and ( (simpleExpression x) , (simpleExpression false) )) = (simpleExpression false) ;) (equation (simpleExpression and ( (simpleExpression false) , (simpleExpression x) )) = (simpleExpression false) ;) (equation (simpleExpression add ( (simpleExpression zero) , (simpleExpression m) )) = (simpleExpression m) ;) (equation (simpleExpression add ( (simpleExpression succ ( (simpleExpression n) )) , (simpleExpression m) )) = (simpleExpression succ ( (simpleExpression add ( (simpleExpression n) , (simpleExpression m) )) )) ;)) (locs loc l ;) (init init (networkTerm (networkTermSingle (deploy deploy ( l , (processTerm (processTermSingle delta) pTP) ))) nTP) ;))
